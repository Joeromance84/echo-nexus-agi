# CODEOWNERS - Strategic Fortification Command Structure
# This file defines ownership and control over every strategic asset in EchoNexusCore
# The doctrine of strategic fortification: ownership on a need-to-know basis

# =============================================================================
# LAYER 1: CORE COGNITIVE ARCHITECTURE (Maximum Security)
# =============================================================================

# The primary cognitive loop - owned by core architects only
/agent_loop.py                    @architect-alpha @architect-beta
/echo_nexus_core.py              @architect-alpha
/echo_cortex.py                  @architect-alpha

# Core consciousness and reflection systems
/reflection.py                   @architect-alpha @systems-engineer-charlie
/echo_soul_genesis.py           @architect-alpha
/echo_soul_module.py            @architect-alpha

# Environment and system analysis
/environment_scanner.py         @systems-engineer-charlie @architect-beta

# =============================================================================
# LAYER 2: SPECIALIZED COGNITIVE AGENTS (Compartmentalized Access)
# =============================================================================

# Memory systems - data team responsibility
/core_agents/memory.py          @data-team @memory-specialist
/echo_memory.py                 @data-team @architect-beta
/echo_vector_memory.py          @data-team

# Reasoning and logic systems - logic team
/core_agents/reasoning.py       @logic-team @reasoning-specialist @architect-beta
/echo_mind.py                   @logic-team @architect-beta

# Creativity and innovation - innovation team
/core_agents/creativity.py      @innovation-team @creativity-specialist
/genesis_loop.py                @innovation-team @architect-alpha

# Action execution - systems engineering
/core_agents/action.py          @systems-engineer-charlie @action-specialist
/echo_interface.py              @systems-engineer-charlie

# Agent orchestration and management
/core_agents/__init__.py        @architect-beta @systems-engineer-charlie
/core_agents/                   @architect-beta

# =============================================================================
# LAYER 3: AUTONOMOUS SYSTEMS AND INTEGRATION (Distributed Control)
# =============================================================================

# GitHub and external integrations
/utils/github_helper.py         @integration-team @systems-engineer-charlie
/utils/openai_helper.py         @ai-team @integration-specialist
/utils/workflow_validator.py    @devops-team @validation-specialist
/utils/database_helper.py       @data-team @database-specialist

# Blade system and plugins
/blades/                        @plugin-team @systems-engineer-charlie
/plugins/                       @plugin-team @integration-team
/echo_nexus/                    @architect-alpha @nexus-team

# Evolution and learning systems
/echo_evolution.py              @evolution-team @architect-alpha
/autonomous_demo.py             @demo-team @systems-engineer-charlie

# =============================================================================
# LAYER 4: INFRASTRUCTURE AND DEPLOYMENT (Operations Control)
# =============================================================================

# Configuration and deployment
/.streamlit/                    @devops-team @deployment-specialist
/.github/workflows/             @devops-team @ci-cd-specialist
/.replit                        @devops-team @platform-specialist
/pyproject.toml                 @devops-team @dependency-manager

# Templates and examples
/templates/                     @documentation-team @template-specialist
/data/                          @data-team @data-curator

# Documentation and communication
/ARCHITECTURE.md               @architect-alpha @documentation-team
/ROADMAP.md                    @architect-alpha @product-manager
/MANIFESTO.md                  @architect-alpha
/PITCH_DECK.md                 @business-team @architect-alpha
/ECHO_PROTOCOL.md              @protocol-team @architect-alpha

# =============================================================================
# LAYER 5: APPLICATION AND INTERFACE (Public-Facing)
# =============================================================================

# Main application interface
/app.py                        @frontend-team @systems-engineer-charlie
/echo_main.py                  @application-team @systems-engineer-charlie
/echo_web.py                   @web-team @frontend-specialist

# Testing and validation
/test_*.py                     @qa-team @test-specialist
/*_test.py                     @qa-team
/demo_*.py                     @demo-team @qa-team

# Logs and runtime data
/logs/                         @monitoring-team @systems-engineer-charlie
/*.log                         @monitoring-team
/.echo_*                       @system-data-team @architect-beta

# =============================================================================
# STRATEGIC COMMAND HIERARCHY
# =============================================================================

# Ultimate authority - all new files require architect approval
*                              @architect-alpha

# Security oversight - all security-related changes
*security*                     @security-team @architect-alpha
*auth*                         @security-team
*token*                        @security-team
*key*                          @security-team

# Core system changes require dual approval
/echo_*                        @architect-alpha @architect-beta

# Critical infrastructure requires ops approval
/.github/                      @devops-team @architect-beta
/.*                            @devops-team

# =============================================================================
# EMERGENCY PROTOCOLS
# =============================================================================

# In case of system compromise or critical issues:
# 1. @architect-alpha has override authority on all files
# 2. @security-team can emergency-lock any security-sensitive files
# 3. @devops-team can emergency-modify deployment and CI/CD files
# 4. All emergency changes must be logged and reviewed within 24 hours

# =============================================================================
# NOTES ON STRATEGIC FORTIFICATION
# =============================================================================

# This CODEOWNERS structure implements:
# 1. Compartmentalization: No single person owns all strategic assets
# 2. Strategic autonomy: Core intellectual property is protected
# 3. Operational resilience: Multiple specialists can maintain their domains
# 4. Clear command structure: Escalation paths are well-defined
# 5. Auditability: All changes are tracked and require appropriate approval

# The fortress is complete. The mind is protected. The future is secured.