name: Echo Core APK Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'echo_nexus/**'
      - 'app.py'
      - 'buildozer.spec'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'github-releases'
        type: choice
        options:
        - github-releases
        - play-store-internal
        - direct-download

jobs:
  # Fast feedback for code quality
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest streamlit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 echo_nexus/ app.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 echo_nexus/ app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test Echo modules
        run: |
          python -c "from echo_nexus.chat_enhancement_processor import DialogueManager; dm = DialogueManager(); print('DialogueManager working')"
          python -c "from echo_nexus.intelligent_ai_router import IntelligentAIRouter; router = IntelligentAIRouter(); print('AI Router working')"

  # Build Echo Core APK
  build-echo-apk:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Buildozer dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.buildozer
            .buildozer
          key: buildozer-${{ hashFiles('buildozer.spec') }}-${{ runner.os }}
          restore-keys: |
            buildozer-${{ hashFiles('buildozer.spec') }}-
            buildozer-

      - name: Set up Java JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config \
            zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
            libffi-dev libssl-dev

      - name: Create buildozer.spec for Echo Core
        run: |
          cat > buildozer.spec << 'EOF'
          [app]
          title = Echo Core AGI
          package.name = echocore
          package.domain = org.echonexus

          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas,json,md

          version = 1.0.0
          requirements = python3,kivy,requests,streamlit,openai,google-genai

          [buildozer]
          log_level = 2

          [app]
          android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE

          [buildozer]
          android.gradle_dependencies = 

          [app]
          android.add_java_dir = java

          [buildozer]
          android.accept_sdk_license = True
          EOF

      - name: Install Buildozer and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer cython
          pip install kivy[base] kivymd

      - name: Create Kivy main.py for mobile deployment
        run: |
          mkdir -p mobile_app
          cat > mobile_app/main.py << 'EOF'
          from kivy.app import App
          from kivy.uix.boxlayout import BoxLayout
          from kivy.uix.label import Label
          from kivy.uix.textinput import TextInput
          from kivy.uix.button import Button
          from kivy.uix.scrollview import ScrollView
          
          import sys
          import os
          sys.path.append(os.path.dirname(os.path.abspath(__file__)))
          
          try:
              from echo_nexus.chat_enhancement_processor import DialogueManager
              from echo_nexus.cost_optimized_ai_client import CostOptimizedAIClient
          except ImportError:
              # Fallback for mobile environment
              class DialogueManager:
                  def __init__(self):
                      self.state = "initial"
                  def get_response(self, input_text):
                      return f"Echo Core Mobile: Processed '{input_text[:50]}...'"
              
              class CostOptimizedAIClient:
                  def synthesize_knowledge(self, text, task_type="knowledge_synthesis"):
                      return {"summary": f"Mobile Analysis: {text[:100]}..."}

          class EchoCoreApp(App):
              def build(self):
                  self.dialogue_manager = DialogueManager()
                  self.ai_client = CostOptimizedAIClient()
                  
                  layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
                  
                  # Title
                  title = Label(text='Echo Core AGI Mobile', size_hint=(1, 0.1), 
                               font_size='20sp', bold=True)
                  layout.add_widget(title)
                  
                  # Chat history
                  self.chat_history = Label(text='Echo Core: Ready for commands...', 
                                          text_size=(None, None), valign='top')
                  scroll = ScrollView(size_hint=(1, 0.7))
                  scroll.add_widget(self.chat_history)
                  layout.add_widget(scroll)
                  
                  # Input area
                  input_layout = BoxLayout(size_hint=(1, 0.2), spacing=10)
                  
                  self.text_input = TextInput(hint_text='Type your message to Echo...',
                                            multiline=True, size_hint=(0.8, 1))
                  input_layout.add_widget(self.text_input)
                  
                  send_button = Button(text='Send', size_hint=(0.2, 1))
                  send_button.bind(on_press=self.send_message)
                  input_layout.add_widget(send_button)
                  
                  layout.add_widget(input_layout)
                  
                  return layout
              
              def send_message(self, instance):
                  user_input = self.text_input.text.strip()
                  if not user_input:
                      return
                  
                  # Add user message to history
                  current_text = self.chat_history.text
                  self.chat_history.text = f"{current_text}\n\nUser: {user_input}"
                  
                  # Process with Echo
                  try:
                      response = self.dialogue_manager.get_response(user_input)
                      self.chat_history.text = f"{self.chat_history.text}\n\nEcho: {response}"
                  except Exception as e:
                      self.chat_history.text = f"{self.chat_history.text}\n\nEcho: Error - {str(e)}"
                  
                  # Clear input
                  self.text_input.text = ''
                  
                  # Update text size for scrolling
                  self.chat_history.text_size = (self.chat_history.parent.width - 20, None)

          if __name__ == '__main__':
              EchoCoreApp().run()
          EOF

      - name: Copy Echo modules for mobile build
        run: |
          cp -r echo_nexus mobile_app/
          cp app.py mobile_app/
          ls -la mobile_app/

      - name: Build APK with Buildozer
        run: |
          cd mobile_app
          buildozer android debug
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

      - name: Verify APK creation
        run: |
          find mobile_app -name "*.apk" -type f
          ls -la mobile_app/bin/ || echo "No bin directory found"

      - name: Upload Echo Core APK
        uses: actions/upload-artifact@v3
        with:
          name: echo-core-apk-${{ github.sha }}
          path: mobile_app/bin/*.apk
          retention-days: 30

      - name: Create Release (if main branch)
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: echo-core-v${{ github.run_number }}
          name: Echo Core AGI v${{ github.run_number }}
          body: |
            ## Echo Core AGI Mobile Release
            
            ðŸš€ **Revolutionary AGI Mobile App**
            - Complete Echo dialogue system
            - Cost-optimized AI routing
            - Knowledge synthesis capabilities
            - Mobile-optimized interface
            
            **Installation:**
            1. Download the APK file
            2. Enable "Install from unknown sources" on Android
            3. Install and launch Echo Core
            
            **Commit:** ${{ github.sha }}
            **Build Date:** ${{ github.event.head_commit.timestamp }}
          files: mobile_app/bin/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with APK link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Echo Core APK built successfully! Download from the Actions artifacts.'
            })